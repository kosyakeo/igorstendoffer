import telebot
import json
import requests
import random
from telebot import types
API = "8017958123:AAGSB6UFz7Z_Ho_1BBLTD-fuSc9-XFULKbo"
WEATHER_API_KEY = "3cac73d629c89471a26530853557dec4"
GIPHY_API_KEY = "Z5DSUwBMYhG914dP2TPFVnICvM2mRmRa"
bot = telebot.TeleBot(API)

COUNTRIES_TRANSLATION = {
    "—Ä–æ—Å—Å–∏—è": "russia",
    "—Å—à–∞": "usa",
    "–∫–∏—Ç–∞–π": "china",
    "–≥–µ—Ä–º–∞–Ω–∏—è": "germany",
    "—Ñ—Ä–∞–Ω—Ü–∏—è": "france",
    "–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": "united kingdom",
    "–∏—Ç–∞–ª–∏—è": "italy",
    "–∏—Å–ø–∞–Ω–∏—è": "spain",
    "—É–∫—Ä–∞–∏–Ω–∞": "ukraine",
    "–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω": "kazakhstan",
    "–±–µ–ª–∞—Ä—É—Å—å": "belarus",
    "—è–ø–æ–Ω–∏—è": "japan",
    "–∫–∞–Ω–∞–¥–∞": "canada",
    "–±—Ä–∞–∑–∏–ª–∏—è": "brazil",
    "–∏–Ω–¥–∏—è": "india",
}

JOKES = [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25!",
    "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞—é—Ç IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±–æ–∏—Ç—Å—è —Ä–∞–±–æ—Ç—ã? –ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π!",
    "–ü–æ—á–µ–º—É Python –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–Ω—è—Ç—å —Ç—è–∂–µ—Å—Ç–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ –Ω–µ—Ç—É __strength__!",
    "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤ –¥—Ä—É–≥–æ–º—É? '–î–∞–≤–∞–π –Ω–µ –±—É–¥–µ–º —Ç–æ—Ä–º–æ–∑–∏—Ç—å!'",
    "–ü–æ—á–µ–º—É —á–∞–π–Ω–∏–∫ –ø—Ä–∏–Ω–µ—Å –Ω–∞ —Ä–∞–±–æ—Ç—É –∑–æ–Ω—Ç? –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–π–¥–µ—Ç –¥–æ–∂–¥—å –∏–∑ –ø–∞–∫–µ—Ç–æ–≤!",
    "–ö–∞–∫–æ–π –Ω–∞–ø–∏—Ç–æ–∫ –ª—é–±—è—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—ã? –ê–ª–≥–æ—Ä–∏—Ç-–º–∏–∫—Å!",
    "–ü–æ—á–µ–º—É –±–æ—Ç –≥—Ä—É—Å—Ç–∏–ª? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ –Ω–µ –±—ã–ª–æ –¥—Ä—É–∑–µ–π-–±–∞–π—Ç–æ–≤!",
    "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –Ω–æ–ª—å –≤–æ—Å—å–º–µ—Ä–∫–µ? '–ù–µ–ø–ª–æ—Ö–æ–π –ø–æ—è—Å–æ–∫!'",
    "–ü–æ—á–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–ª–æ—Ö–æ —Å–ø–∞–ª? –£ –Ω–µ–≥–æ –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç—å—é!",
    "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞—é—Ç —Å–æ–±–∞–∫—É-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞? –î–æ–≥-—Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä!"
]

def translate_country_name(russian_name):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
    lower_name = russian_name.lower()
    return COUNTRIES_TRANSLATION.get(lower_name, russian_name)

def get_cat_image_url():
    response = requests.get('https://api.thecatapi.com/v1/images/search').text
    return json.loads(response)[0]['url']

def get_dog_image_url():
    response = requests.get('https://dog.ceo/api/breeds/image/random').text
    return json.loads(response)['message']

def get_car_image_url():
    response = requests.get('https://api.unsplash.com/search/photos', 
                          params={'query': 'car', 'client_id': 'ILyN0JwXGb3F5ppck3ViRn1r51F2RX9iv8J6FhXkNzE'})
    if response.status_code == 200:
        return json.loads(response.text)['results'][0]['urls']['regular']
    else:
        return None

def get_random_gif():
    try:
        response = requests.get(f'https://api.giphy.com/v1/gifs/random?api_key={GIPHY_API_KEY}&rating=g')
        if response.status_code == 200:
            data = json.loads(response.text)
            return data['data']['images']['original']['url']
    except:
        return None
    return None

def get_country_population(country_name):
    try:
        english_name = translate_country_name(country_name)
        response = requests.get(f"https://restcountries.com/v3.1/name/{english_name}")
        if response.status_code == 200:
            data = json.loads(response.text)
            return f"{data[0]['population']:,}"
        return None
    except:
        return None
    
def get_random_joke():
    return random.choice(JOKES)

def get_weather(city):
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        data = json.loads(response.text)
        
        if data["cod"] != 200:
            return None
            
        return {
            "city": data["name"],
            "temp": round(data["main"]["temp"]),
            "feels_like": round(data["main"]["feels_like"])
        }
    except:
        return None
    
def create_main_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton("üê± –ö–æ—Ç–∏–∫", callback_data="cat"),
        types.InlineKeyboardButton("üê∂ –°–æ–±–∞—á–∫–∞", callback_data="dog")
    )
    keyboard.row(
        types.InlineKeyboardButton("üöó –ú–∞—à–∏–Ω–∞", callback_data="car"),
        types.InlineKeyboardButton("üé¨ –ì–∏—Ñ–∫–∞", callback_data="gif")
    )
    keyboard.row(
        types.InlineKeyboardButton("üåç –ù–∞—Å–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã", callback_data="population"),
        types.InlineKeyboardButton("üòÇ –®—É—Ç–∫–∞", callback_data="joke")
    )
    keyboard.row(
        types.InlineKeyboardButton("‚òÄÔ∏è –ü–æ–≥–æ–¥–∞", callback_data="weather"),
        types.InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å", callback_data="reset")
    )
    return keyboard

def create_back_keyboard():
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    keyboard.add("‚óÄÔ∏è –ù–∞–∑–∞–¥")
    return keyboard

@bot.message_handler(commands=['start', 'reset'])
def welcome(message):
    bot.send_message(
        message.chat.id,
        text="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:",
        reply_markup=create_main_keyboard()
    )

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "cat":
        image = get_cat_image_url()
        bot.send_photo(call.message.chat.id, photo=image)
        show_main_menu(call.message)
    elif call.data == "dog":
        image = get_dog_image_url()
        bot.send_photo(call.message.chat.id, photo=image)
        show_main_menu(call.message)
    elif call.data == "car":
        image = get_car_image_url()
        if image:
            bot.send_photo(call.message.chat.id, photo=image)
        else:
            bot.send_message(call.message.chat.id, "–ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã —Å–µ–π—á–∞—Å.")
        show_main_menu(call.message)
    elif call.data == "gif":
        gif_url = get_random_gif()
        if gif_url:
            bot.send_animation(call.message.chat.id, animation=gif_url)
        else:
            bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–∏—Ñ–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        show_main_menu(call.message)
    elif call.data == "population":
        msg = bot.send_message(
            call.message.chat.id, 
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è)\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚óÄÔ∏è –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞",
            reply_markup=create_back_keyboard()
        )
        bot.register_next_step_handler(msg, process_country_population)
    elif call.data == "joke":
        joke = get_random_joke()
        bot.send_message(call.message.chat.id, joke)
        show_main_menu(call.message)
    elif call.data == "weather":
        msg = bot.send_message(
            call.message.chat.id, 
            "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚óÄÔ∏è –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞",
            reply_markup=create_back_keyboard()
        )
        bot.register_next_step_handler(msg, show_weather)
    elif call.data == "reset":
        welcome(call.message)
    
    try:
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None
        )
    except:
        pass

def show_main_menu(message):
    bot.send_message(
        message.chat.id,
        text="–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:",
        reply_markup=create_main_keyboard()
    )

def show_weather(message):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        show_main_menu(message)
        return
        
    city = message.text.strip()
    weather = get_weather(city)
    
    if weather:
        response = f"–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ {weather['city']}:\n {weather['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {weather['feels_like']}¬∞C)"
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
    
    show_main_menu(message)

def process_country_population(message):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        show_main_menu(message)
        return
        
    country = message.text.strip()
    population = get_country_population(country)
    if population:
        bot.send_message(message.chat.id, f"–ù–∞—Å–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã {country}: {population} —á–µ–ª–æ–≤–µ–∫")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã.")
    
    show_main_menu(message)

@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        show_main_menu(message)
        return
        
    if message.text and message.text[0].isupper():
        weather = get_weather(message.text)
        if weather:
            show_weather(message)
            return
        
        population = get_country_population(message.text)
        if population:
            bot.send_message(message.chat.id, f"–ù–∞—Å–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã {message.text}: {population} —á–µ–ª–æ–≤–µ–∫")
            show_main_menu(message)
            return
    
    bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ! –Ø —Ç–µ–±—è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª!")
    show_main_menu(message)

bot.infinity_polling()